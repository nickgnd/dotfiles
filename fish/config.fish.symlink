# Don't show greeting message
set -U fish_greeting

# Use the default (emacs) key bindings
fish_default_key_bindings

# Environment
set -x LANG 'en_US.UTF-8'
set -x LC_ALL 'en_US.UTF-8'

# Setup homebrew
if status is-interactive
  eval (/opt/homebrew/bin/brew shellenv)

  # Setup atuin
  atuin init fish | source
end

# Shell variables
set -x SHELL fish
set -x EDITOR "nvim"

# https://yellowduck.be/posts/edit-multiline-elixir-commands-in-your-favourite-editor-from-iex
set -x VISION "nvim"

################### PATH

# Apppend to path if they exist (orders matter)
fish_add_path -aP /bin
fish_add_path -aP /usr/bin
fish_add_path -aP /usr/local/bin
fish_add_path -aP /usr/local/sbin
fish_add_path -aP "$HOME/dotfiles/bin"                 # add executables from dotfiles
fish_add_path -aP "/usr/local/opt/openssl/bin"         # add openssl
fish_add_path -aP "/opt/homebrew/opt/libpq/bin"        # add libpq for `psql` command

################### Setup and tools

# Setup starship for prompt (https://starship.rs/)
if type -q starship
  starship init fish | source
end

# Setup zoxide
if type -q zoxide
  zoxide init fish | source
end

# Setup rust
if [ -f "$HOME/.cargo/env.fish" ]
  source "$HOME/.cargo/env.fish"
end

################### Custom functions

# tmux create or attach session
function tat -d "Start a named tmux session in the current folder"
  set -l name (basename (pwd) | sed -e 's/\.//g')

  if tmux ls 2>&1 | grep "$name"
    tmux attach -t "$name"
  else
    tmux new-session -s "$name"
  end
end

# print NPM_TOKEN from `~/.npmrc`
function npm_token -d "Print npm token"
  if test -f "$HOME/.npmrc"
    cat $HOME/.npmrc | grep -o '_authToken=.*' | sed 's/_authToken=//g'
  else
    echo "$HOME/.npmrc file does not exist."
  end
end

function update -d "Update brew, fish, fisher"
    echo 'Start updating ...'

    echo 'Updating homebrew'
    brew update
    brew upgrade
    brew cleanup

    echo 'Updating fish shell'
    fisher
    fish_update_completions

    exit 0
end

# start nvim listning to a socket if in tmux session
function nvim_with_socket
    if test -n "$TMUX"
        echo "Using tmux session-aware Neovim"
        bash -c "nvim_listen $argv"
    else
        command nvim $argv
    end
end


################# Abbreviations and Aliases

# Fish abbreviations

# Create abbreviation
abbr -a n nvim_with_socket

# Use `bat` instead of `cat`
if type -q bat
    abbr cat bat
    set -x BAT_THEME ansi
    set -x BAT_PAGER
    set -x COLORTERM truecolor
end

# Use `fd` instead of `find`
if type -q fd
    abbr find fd

    # Respect .gitignore (https://github.com/junegunn/fzf#respecting-gitignore)
    set -gx FZF_DEFAULT_COMMAND "fd --type f --strip-cwd-prefix --hidden --follow --exclude .git"
    set -gx FZF_CTRL_T_COMMAND $FZF_DEFAULT_COMMAND
    set -gx FZF_CTRL_T_OPTS "--preview='bat --style=numbers --color=always {}'"
end

# Use `eza` instead of `ls`
if type -q eza
    abbr l eza
    abbr ls eza
    abbr ll 'eza --long --all --sort modified'
    abbr llg 'eza --long --git'
else
    abbr l 'ls -lah'
    abbr ll 'ls -lh'
end

# Use `rg` (ripgrep) instead of `grep`
if type -q rg
    abbr grep rg
end

if type -q tmux
  # Get current tmux pane id
  abbr tcp "tmux display-message -p '#{pane_id}'"


end

if type -q tmux-sessionizer
  abbr ts tmux-sessionizer
end

# Elixir abbreviations
if type -q iex
  abbr imp 'iex -S mix phx.server'
end

# VSCode abbreviations
if type -q code
  abbr c 'code .'
end

# Aliases

alias be="bundle exec"
alias md='mkdir -p'
alias reload!='source ~/.config/fish/config.fish'
alias t="tree -L 1"

# git aliases (inspired by oh-my-zsh https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh)
# TODO: clean-up unused commands
alias gst="git status"
alias gss="git status --short --branch"
alias gb="git branch"
alias gbnm="git branch --no-merged"
alias ga="git add"
alias gaa="git add --all"
alias gap="git add -p"
alias gc="git commit -v"
alias gc!="git commit -v --amend"
alias gcn!="git commit -v --no-edit --amend"
alias gco="git checkout"
alias gp="git push"
alias gpf="git push --force-with-lease"
alias gd="git diff"
alias gds="git diff --staged"
alias gdt="git diff-tree --no-commit-id --name-only -r"
alias gdw="git diff --word-diff"
alias gfa="git fetch --all --prune --jobs=10"
alias glg="git log --stat"
alias glgp="git log --stat -p"
alias glo="git log --oneline --decorate"
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias grbi="git rebase -i"
alias gpsup="git pushup" # defined in gitconfig file
alias gdi="git delete-fzf" # delete git branch interactive - defined in gitconfig file
alias gwip="git add .; git commit -m 'WIP. reset me!'"
# Checkout github PR, use it like `gpo 1234`
alias gpo="gh pr checkout"

# Key bindings

# fzf <> fish bindings (requires `PatrickF1/fzf.fish` plugin)
# https://github.com/PatrickF1/fzf.fish/blob/main/functions/_fzf_configure_bindings_help.fish
if type -q fzf_configure_bindings
  # Trigger git log search with `CTRL + ALT + l` to don't clash with tmux/nvim panes navigation
  fzf_configure_bindings --directory=\cf --git_log=\e\cl --git_status=\cs --history= --variables=\cv --processes=
end

# Erlang and Elixir
set -x ERL_AFLAGS "-kernel shell_history enabled"  # shell history for Erlang / Elixir
set -x KERL_BUILD_DOCS "yes"                       # enable docs consultation for Erlang
set -x KERL_CONFIGURE_OPTIONS "--disable-debug --without-javac"
set -x ERL_EPMD_ADDRESS "127.0.0.1"                # prevent epmd from exposing port

# Homebrew
set -x HOMEBREW_BUNDLE_NO_LOCK 1 # Disable lockfile for brew bundle

if test -d (brew --prefix)"/share/fish/completions"
    set -p fish_complete_path (brew --prefix)/share/fish/completions
end

if test -d (brew --prefix)"/share/fish/vendor_completions.d"
    set -p fish_complete_path (brew --prefix)/share/fish/vendor_completions.d
end

# Enable AWS CLI autocompletion: github.com/aws/aws-cli/issues/1079
if type -q aws
  complete --command aws --no-files --arguments '(begin; set --local --export COMP_SHELL fish; set --local --export COMP_LINE (commandline); aws_completer | sed \'s/ $//\'; end)'
end

if status is-interactive
  # Commands to run in interactive sessions can go here
end
